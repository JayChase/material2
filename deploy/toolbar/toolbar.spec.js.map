{"version":3,"file":"toolbar.spec.js","sourceRoot":"","sources":["../../src/demo-app/components/toolbar/toolbar.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAwB,eAAe,CAAC,CAAA;AACxC,wBAMO,uBAAuB,CAAC,CAAA;AAC/B,wBAAmC,2BAA2B,CAAC,CAAA;AAC/D,iCAAiB,2BAA2B,CAAC,CAAA;AAC7C,wBAAwB,WAAW,CAAC,CAAA;AAEpC,kBAAQ,CAAC,WAAW,EAAE;IACpB,IAAI,OAA6B,CAAC;IAElC,oBAAU,CAAC,gBAAM,CAAC,CAAC,8BAAoB,CAAC,EAAE,UAAC,GAAyB;QAClE,OAAO,GAAG,GAAG,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC;IAEJ,YAAE,CAAC,6CAA6C,EAAE,UAAC,IAAgB;QACjE,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,OAAO;YAC/C,IAAI,aAAa,GAAG,OAAO,CAAC,YAAY,CAAC,iBAAiB,CAAC;YAC3D,IAAI,mBAAmB,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,qBAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;YAE3E,aAAa,CAAC,YAAY,GAAG,SAAS,CAAC;YACvC,OAAO,CAAC,aAAa,EAAE,CAAC;YAExB,gBAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEtF,aAAa,CAAC,YAAY,GAAG,QAAQ,CAAC;YACtC,OAAO,CAAC,aAAa,EAAE,CAAC;YAExB,gBAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvF,gBAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAErF,aAAa,CAAC,YAAY,GAAG,MAAM,CAAC;YACpC,OAAO,CAAC,aAAa,EAAE,CAAC;YAExB,gBAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACtF,gBAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnF,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC;AAWH;IAAA;IAEA,CAAC;IAXD;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,QAAQ,EAAE,qGAIT;YACD,UAAU,EAAE,CAAC,mBAAS,CAAC;SACxB,CAAC;;eAAA;IAGF,cAAC;AAAD,CAAC,AAFD,IAEC","sourcesContent":["import {Component} from '@angular/core';\r\nimport {\r\n  it,\r\n  describe,\r\n  expect,\r\n  beforeEach,\r\n  inject,\r\n} from '@angular/core/testing';\r\nimport {TestComponentBuilder} from '@angular/compiler/testing';\r\nimport {By} from '@angular/platform-browser';\r\nimport {MdToolbar} from './toolbar';\r\n\r\ndescribe('MdToolbar', () => {\r\n  let builder: TestComponentBuilder;\r\n\r\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\r\n    builder = tcb;\r\n  }));\r\n\r\n  it('should apply class based on color attribute', (done: () => void) => {\r\n    return builder.createAsync(TestApp).then((fixture) => {\r\n      let testComponent = fixture.debugElement.componentInstance;\r\n      let toolbarDebugElement = fixture.debugElement.query(By.css('md-toolbar'));\r\n\r\n      testComponent.toolbarColor = 'primary';\r\n      fixture.detectChanges();\r\n\r\n      expect(toolbarDebugElement.nativeElement.classList.contains('md-primary')).toBe(true);\r\n\r\n      testComponent.toolbarColor = 'accent';\r\n      fixture.detectChanges();\r\n\r\n      expect(toolbarDebugElement.nativeElement.classList.contains('md-primary')).toBe(false);\r\n      expect(toolbarDebugElement.nativeElement.classList.contains('md-accent')).toBe(true);\r\n\r\n      testComponent.toolbarColor = 'warn';\r\n      fixture.detectChanges();\r\n\r\n      expect(toolbarDebugElement.nativeElement.classList.contains('md-accent')).toBe(false);\r\n      expect(toolbarDebugElement.nativeElement.classList.contains('md-warn')).toBe(true);\r\n\r\n      done();\r\n    });\r\n  });\r\n\r\n});\r\n\r\n@Component({\r\n  selector: 'test-app',\r\n  template: `\r\n    <md-toolbar [color]=\"toolbarColor\">\r\n      <span>Test Toolbar</span>\r\n    </md-toolbar>\r\n  `,\r\n  directives: [MdToolbar]\r\n})\r\nclass TestApp {\r\n  toolbarColor: string;\r\n}\r\n"]}