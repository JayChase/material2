{"version":3,"file":"portal.spec.js","sourceRoot":"","sources":["../../src/demo-app/core/portal/portal.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  it,\r\n  describe,\r\n  expect,\r\n  beforeEach,\r\n  inject,\r\n  fakeAsync,\r\n  flushMicrotasks\r\n} from '@angular/core/testing';\r\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\r\nimport {\r\n  Component,\r\n  ViewChildren,\r\n  QueryList,\r\n  ViewContainerRef,\r\n  ComponentResolver\r\n} from '@angular/core';\r\nimport {TemplatePortalDirective, PortalHostDirective} from './portal-directives';\r\nimport {Portal, ComponentPortal} from './portal';\r\nimport {DomPortalHost} from './dom-portal-host';\r\n\r\n\r\ndescribe('Portals', () => {\r\n  let builder: TestComponentBuilder;\r\n\r\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\r\n    builder = tcb;\r\n  }));\r\n\r\n  describe('PortalHostDirective', () => {\r\n    it('should load a component into the portal', fakeAsync(() => {\r\n      let appFixture: ComponentFixture<PortalTestApp>;\r\n\r\n      builder.createAsync(PortalTestApp).then(fixture => {\r\n        appFixture = fixture;\r\n      });\r\n\r\n      // Flush the async creation of the PortalTestApp.\r\n      flushMicrotasks();\r\n\r\n      // Set the selectedHost to be a ComponentPortal.\r\n      let testAppComponent = appFixture.debugElement.componentInstance;\r\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg);\r\n      appFixture.detectChanges();\r\n\r\n      // Flush the attachment of the Portal.\r\n      flushMicrotasks();\r\n\r\n      // Expect that the content of the attached portal is present.\r\n      let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\r\n      expect(hostContainer.textContent).toContain('Pizza');\r\n    }));\r\n\r\n    it('should load a <template> portal', fakeAsync(() => {\r\n      let appFixture: ComponentFixture<PortalTestApp>;\r\n\r\n      builder.createAsync(PortalTestApp).then(fixture => {\r\n        appFixture = fixture;\r\n      });\r\n\r\n      // Flush the async creation of the PortalTestApp.\r\n      flushMicrotasks();\r\n\r\n      let testAppComponent = appFixture.debugElement.componentInstance;\r\n\r\n      // Detect changes initially so that the component's ViewChildren are resolved.\r\n      appFixture.detectChanges();\r\n\r\n      // Set the selectedHost to be a TemplatePortal.\r\n      testAppComponent.selectedPortal = testAppComponent.cakePortal;\r\n      appFixture.detectChanges();\r\n\r\n      // Flush the attachment of the Portal.\r\n      flushMicrotasks();\r\n\r\n      // Expect that the content of the attached portal is present.\r\n      let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\r\n      expect(hostContainer.textContent).toContain('Cake');\r\n    }));\r\n\r\n    it('should load a <template> portal with the `*` sugar', fakeAsync(() => {\r\n      let appFixture: ComponentFixture<PortalTestApp>;\r\n\r\n      builder.createAsync(PortalTestApp).then(fixture => {\r\n        appFixture = fixture;\r\n      });\r\n\r\n      // Flush the async creation of the PortalTestApp.\r\n      flushMicrotasks();\r\n\r\n      let testAppComponent = appFixture.debugElement.componentInstance;\r\n\r\n      // Detect changes initially so that the component's ViewChildren are resolved.\r\n      appFixture.detectChanges();\r\n\r\n      // Set the selectedHost to be a TemplatePortal (with the `*` syntax).\r\n      testAppComponent.selectedPortal = testAppComponent.piePortal;\r\n      appFixture.detectChanges();\r\n\r\n      // Flush the attachment of the Portal.\r\n      flushMicrotasks();\r\n\r\n      // Expect that the content of the attached portal is present.\r\n      let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\r\n      expect(hostContainer.textContent).toContain('Pie');\r\n    }));\r\n\r\n    it('should load a <template> portal with a binding', fakeAsync(() => {\r\n      let appFixture: ComponentFixture<PortalTestApp>;\r\n\r\n      builder.createAsync(PortalTestApp).then(fixture => {\r\n        appFixture = fixture;\r\n      });\r\n\r\n      // Flush the async creation of the PortalTestApp.\r\n      flushMicrotasks();\r\n\r\n      let testAppComponent = appFixture.debugElement.componentInstance;\r\n\r\n      // Detect changes initially so that the component's ViewChildren are resolved.\r\n      appFixture.detectChanges();\r\n\r\n      // Set the selectedHost to be a TemplatePortal.\r\n      testAppComponent.selectedPortal = testAppComponent.portalWithBinding;\r\n      appFixture.detectChanges();\r\n\r\n      // Flush the attachment of the Portal.\r\n      flushMicrotasks();\r\n\r\n      // Now that the portal is attached, change detection has to happen again in order\r\n      // for the bindings to update.\r\n      appFixture.detectChanges();\r\n\r\n      // Expect that the content of the attached portal is present.\r\n      let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\r\n      expect(hostContainer.textContent).toContain('Banana');\r\n\r\n      // When updating the binding value.\r\n      testAppComponent.fruit = 'Mango';\r\n      appFixture.detectChanges();\r\n\r\n      // Expect the new value to be reflected in the rendered output.\r\n      expect(hostContainer.textContent).toContainError('Mango');\r\n    }));\r\n\r\n    it('should change the attached portal', fakeAsync(() => {\r\n      let appFixture: ComponentFixture<PortalTestApp>;\r\n\r\n      builder.createAsync(PortalTestApp).then(fixture => {\r\n        appFixture = fixture;\r\n      });\r\n\r\n      // Flush the async creation of the PortalTestApp.\r\n      flushMicrotasks();\r\n\r\n      let testAppComponent = appFixture.debugElement.componentInstance;\r\n\r\n      // Detect changes initially so that the component's ViewChildren are resolved.\r\n      appFixture.detectChanges();\r\n\r\n      // Set the selectedHost to be a ComponentPortal.\r\n      testAppComponent.selectedPortal = testAppComponent.piePortal;\r\n      appFixture.detectChanges();\r\n\r\n      // Flush the attachment of the Portal.\r\n      flushMicrotasks();\r\n      appFixture.detectChanges();\r\n\r\n      // Expect that the content of the attached portal is present.\r\n      let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\r\n      expect(hostContainer.textContent).toContain('Pie');\r\n\r\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg);\r\n      appFixture.detectChanges();\r\n\r\n      flushMicrotasks();\r\n\r\n      expect(hostContainer.textContent).toContain('Pizza');\r\n    }));\r\n  });\r\n\r\n  describe('DomPortalHost', function () {\r\n    let componentLoader: ComponentResolver;\r\n    let someViewContainerRef: ViewContainerRef;\r\n    let someDomElement: HTMLElement;\r\n    let host: DomPortalHost;\r\n\r\n    beforeEach(inject([ComponentResolver], (dcl: ComponentResolver) => {\r\n      componentLoader = dcl;\r\n    }));\r\n\r\n    beforeEach(() => {\r\n      someDomElement = document.createElement('div');\r\n      host = new DomPortalHost(someDomElement, componentLoader);\r\n    });\r\n\r\n    it('should attach and detach a component portal', fakeAsync(() => {\r\n      builder.createAsync(ArbitraryViewContainerRefComponent).then(fixture => {\r\n        someViewContainerRef = fixture.componentInstance.viewContainerRef;\r\n      });\r\n\r\n      flushMicrotasks();\r\n\r\n      let portal = new ComponentPortal(PizzaMsg, someViewContainerRef);\r\n\r\n      let componentInstance: PizzaMsg;\r\n      portal.attach(host).then(ref => {\r\n        componentInstance = ref.instance;\r\n      });\r\n\r\n      flushMicrotasks();\r\n\r\n      expect(componentInstance).toBeAnInstanceOf(PizzaMsg);\r\n      expect(someDomElement.textContent).toContain('Pizza');\r\n\r\n      host.detach();\r\n      flushMicrotasks();\r\n\r\n      expect(someDomElement.innerHTML).toBe('');\r\n    }));\r\n\r\n    it('should attach and detach a template portal', fakeAsync(() => {\r\n      let appFixture: ComponentFixture<PortalTestApp>;\r\n\r\n      builder.createAsync(PortalTestApp).then(fixture => {\r\n        appFixture = fixture;\r\n      });\r\n\r\n      // Flush the async creation of the PortalTestApp.\r\n      flushMicrotasks();\r\n      appFixture.detectChanges();\r\n\r\n      appFixture.componentInstance.cakePortal.attach(host);\r\n      flushMicrotasks();\r\n\r\n      expect(someDomElement.textContent).toContain('Cake');\r\n    }));\r\n\r\n    it('should attach and detach a template portal with a binding', fakeAsync(() => {\r\n      let appFixture: ComponentFixture<PortalTestApp>;\r\n      builder.createAsync(PortalTestApp).then(fixture => {\r\n        appFixture = fixture;\r\n      });\r\n\r\n      // Flush the async creation of the PortalTestApp.\r\n      flushMicrotasks();\r\n\r\n      let testAppComponent = appFixture.debugElement.componentInstance;\r\n\r\n      // Detect changes initially so that the component's ViewChildren are resolved.\r\n      appFixture.detectChanges();\r\n\r\n      // Attach the TemplatePortal.\r\n      testAppComponent.portalWithBinding.attach(host);\r\n      appFixture.detectChanges();\r\n\r\n      // Flush the attachment of the Portal.\r\n      flushMicrotasks();\r\n\r\n      // Now that the portal is attached, change detection has to happen again in order\r\n      // for the bindings to update.\r\n      appFixture.detectChanges();\r\n\r\n      // Expect that the content of the attached portal is present.\r\n      expect(someDomElement.textContent).toContain('Banana');\r\n\r\n      // When updating the binding value.\r\n      testAppComponent.fruit = 'Mango';\r\n      appFixture.detectChanges();\r\n\r\n      // Expect the new value to be reflected in the rendered output.\r\n      expect(someDomElement.textContent).toContainError('Mango');\r\n\r\n      host.detach();\r\n      expect(someDomElement.innerHTML).toBe('');\r\n    }));\r\n\r\n    it('should change the attached portal', fakeAsync(() => {\r\n      builder.createAsync(ArbitraryViewContainerRefComponent).then(fixture => {\r\n        someViewContainerRef = fixture.componentInstance.viewContainerRef;\r\n      });\r\n\r\n      flushMicrotasks();\r\n\r\n      let appFixture: ComponentFixture<PortalTestApp>;\r\n\r\n      builder.createAsync(PortalTestApp).then(fixture => {\r\n        appFixture = fixture;\r\n      });\r\n\r\n      // Flush the async creation of the PortalTestApp.\r\n      flushMicrotasks();\r\n      appFixture.detectChanges();\r\n\r\n      appFixture.componentInstance.piePortal.attach(host);\r\n      flushMicrotasks();\r\n\r\n      expect(someDomElement.textContent).toContain('Pie');\r\n\r\n      host.detach();\r\n      flushMicrotasks();\r\n\r\n      host.attach(new ComponentPortal(PizzaMsg, someViewContainerRef));\r\n      flushMicrotasks();\r\n\r\n      expect(someDomElement.textContent).toContain('Pizza');\r\n    }));\r\n  });\r\n});\r\n\r\n\r\n/** Simple component for testing ComponentPortal. */\r\n@Component({\r\n  selector: 'pizza-msg',\r\n  template: '<p>Pizza</p>',\r\n})\r\nclass PizzaMsg {\r\n}\r\n\r\n/** Simple component to grab an arbitrary ViewContainerRef */\r\n@Component({\r\n  selector: 'some-placeholder',\r\n  template: '<p>Hello</p>'\r\n})\r\nclass ArbitraryViewContainerRefComponent {\r\n  constructor(public viewContainerRef: ViewContainerRef) {\r\n  }\r\n}\r\n\r\n\r\n/** Test-bed component that contains a portal host and a couple of template portals. */\r\n@Component({\r\n  selector: 'portal-test',\r\n  template: `\r\n  <div class=\"portal-container\">\r\n    <template [portalHost]=\"selectedPortal\"></template>\r\n  </div>\r\n\r\n  <template portal>Cake</template>\r\n\r\n  <div *portal>Pie</div>\r\n\r\n  <template portal> {{fruit}} </template>\r\n  `,\r\n  directives: [PortalHostDirective, TemplatePortalDirective],\r\n})\r\nclass PortalTestApp {\r\n  @ViewChildren(TemplatePortalDirective) portals: QueryList<TemplatePortalDirective>;\r\n  selectedPortal: Portal<any>;\r\n  fruit: string = 'Banana';\r\n\r\n  get cakePortal() {\r\n    return this.portals.first;\r\n  }\r\n\r\n  get piePortal() {\r\n    return this.portals.toArray()[1];\r\n  }\r\n\r\n  get portalWithBinding() {\r\n    return this.portals.toArray()[2];\r\n  }\r\n}\r\n"]}