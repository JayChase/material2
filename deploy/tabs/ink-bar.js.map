{"version":3,"file":"ink-bar.js","sourceRoot":"","sources":["../../src/demo-app/components/tabs/ink-bar.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA8C,eAAe,CAAC,CAAA;AAE9D;;;GAGG;AAIH;IACE,kBAAoB,SAAmB,EAAU,WAAuB;QAApD,cAAS,GAAT,SAAS,CAAU;QAAU,gBAAW,GAAX,WAAW,CAAY;IAAG,CAAC;IAE5E;;;OAGG;IACH,iCAAc,GAAd,UAAe,OAAoB;QACjC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EACjE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,OAAO,EAClE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACK,mCAAgB,GAAxB,UAAyB,OAAoB;QAC3C,MAAM,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACK,mCAAgB,GAAxB,UAAyB,OAAoB;QAC3C,MAAM,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;IACpC,CAAC;IAjCH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,YAAY;SACvB,CAAC;;gBAAA;IAgCF,eAAC;AAAD,CAAC,AA/BD,IA+BC;AA/BY,gBAAQ,WA+BpB,CAAA","sourcesContent":["import {Directive, Renderer, ElementRef} from '@angular/core';\r\n\r\n/**\r\n * The ink-bar is used to display and animate the line underneath the current active tab label.\r\n * @internal\r\n */\r\n@Directive({\r\n  selector: 'md-ink-bar',\r\n})\r\nexport class MdInkBar {\r\n  constructor(private _renderer: Renderer, private _elementRef: ElementRef) {}\r\n\r\n  /**\r\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\r\n   * @param element\r\n   */\r\n  alignToElement(element: HTMLElement) {\r\n    this._renderer.setElementStyle(this._elementRef.nativeElement, 'left',\r\n        this._getLeftPosition(element));\r\n    this._renderer.setElementStyle(this._elementRef.nativeElement, 'width',\r\n        this._getElementWidth(element));\r\n  }\r\n\r\n  /**\r\n   * Generates the pixel distance from the left based on the provided element in string format.\r\n   * @param element\r\n   * @returns {string}\r\n   */\r\n  private _getLeftPosition(element: HTMLElement): string {\r\n    return element.offsetLeft + 'px';\r\n  }\r\n\r\n  /**\r\n   * Generates the pixel width from the provided element in string format.\r\n   * @param element\r\n   * @returns {string}\r\n   */\r\n  private _getElementWidth(element: HTMLElement): string {\r\n    return element.offsetWidth + 'px';\r\n  }\r\n}\r\n"]}