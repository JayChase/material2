{"version":3,"file":"radio.spec.js","sourceRoot":"","sources":["../../src/demo-app/components/radio/radio.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    it,\r\n    describe,\r\n    beforeEach,\r\n    beforeEachProviders,\r\n    inject,\r\n    async,\r\n    fakeAsync,\r\n    tick\r\n} from '@angular/core/testing';\r\nimport {FORM_DIRECTIVES, NgControl} from '@angular/common';\r\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\r\nimport {Component, DebugElement, provide} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {MD_RADIO_DIRECTIVES, MdRadioGroup, MdRadioButton, MdRadioChange} from './radio';\r\nimport {MdRadioDispatcher} from './radio_dispatcher';\r\n\r\n\r\ndescribe('MdRadio', () => {\r\n  let builder: TestComponentBuilder;\r\n  let dispatcher: MdRadioDispatcher;\r\n\r\n  beforeEachProviders(() => [\r\n    provide(MdRadioDispatcher, {useFactory: () => {\r\n      dispatcher = new MdRadioDispatcher();\r\n      return dispatcher;\r\n    }})\r\n  ]);\r\n\r\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\r\n    builder = tcb;\r\n  }));\r\n\r\n  describe('inside of a group', () => {\r\n    let fixture: ComponentFixture<RadiosInsideRadioGroup>;\r\n    let groupDebugElement: DebugElement;\r\n    let groupNativeElement: HTMLElement;\r\n    let radioDebugElements: DebugElement[];\r\n    let radioNativeElements: HTMLElement[];\r\n    let groupInstance: MdRadioGroup;\r\n    let radioInstances: MdRadioButton[];\r\n    let testComponent: RadiosInsideRadioGroup;\r\n\r\n    beforeEach(async(() => {\r\n      builder.createAsync(RadiosInsideRadioGroup).then(f => {\r\n        fixture = f;\r\n        fixture.detectChanges();\r\n\r\n        testComponent = fixture.debugElement.componentInstance;\r\n\r\n        groupDebugElement = fixture.debugElement.query(By.directive(MdRadioGroup));\r\n        groupNativeElement = groupDebugElement.nativeElement;\r\n        groupInstance = groupDebugElement.injector.get(MdRadioGroup);\r\n\r\n        radioDebugElements = fixture.debugElement.queryAll(By.directive(MdRadioButton));\r\n        radioNativeElements = radioDebugElements.map(debugEl => debugEl.nativeElement);\r\n        radioInstances = radioDebugElements.map(debugEl => debugEl.componentInstance);\r\n      });\r\n    }));\r\n\r\n    it('should set individual radio names based on the group name', () => {\r\n      expect(groupInstance.name).toBeTruthy();\r\n      for (let radio of radioInstances) {\r\n        expect(radio.name).toBe(groupInstance.name);\r\n      }\r\n    });\r\n\r\n    it('should disable click interaction when the group is disabled', () => {\r\n      testComponent.isGroupDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      radioNativeElements[0].click();\r\n      expect(radioInstances[0].checked).toBe(false);\r\n    });\r\n\r\n    it('should disable each individual radio when the group is disabled', () => {\r\n      testComponent.isGroupDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      for (let radio of radioInstances) {\r\n        expect(radio.disabled).toBe(true);\r\n      }\r\n    });\r\n\r\n    it('should update the group value when one of the radios changes', () => {\r\n      expect(groupInstance.value).toBeFalsy();\r\n\r\n      radioInstances[0].checked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(groupInstance.value).toBe('fire');\r\n      expect(groupInstance.selected).toBe(radioInstances[0]);\r\n    });\r\n\r\n    it('should update the group and radios when one of the radios is clicked', () => {\r\n      expect(groupInstance.value).toBeFalsy();\r\n\r\n      radioNativeElements[0].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(groupInstance.value).toBe('fire');\r\n      expect(groupInstance.selected).toBe(radioInstances[0]);\r\n      expect(radioInstances[0].checked).toBe(true);\r\n      expect(radioInstances[1].checked).toBe(false);\r\n\r\n      radioNativeElements[1].click();\r\n      fixture.detectChanges();\r\n\r\n      expect(groupInstance.value).toBe('water');\r\n      expect(groupInstance.selected).toBe(radioInstances[1]);\r\n      expect(radioInstances[0].checked).toBe(false);\r\n      expect(radioInstances[1].checked).toBe(true);\r\n    });\r\n\r\n    it('should check a radio upon interaction with the underlying native radio button', () => {\r\n      let nativeRadioInput = <HTMLElement> radioNativeElements[0].querySelector('input');\r\n\r\n      nativeRadioInput.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(radioInstances[0].checked).toBe(true);\r\n      expect(groupInstance.value).toBe('fire');\r\n      expect(groupInstance.selected).toBe(radioInstances[0]);\r\n    });\r\n\r\n    it('should emit a change event from radio buttons', fakeAsync(() => {\r\n      expect(radioInstances[0].checked).toBe(false);\r\n\r\n      let changeSpy = jasmine.createSpy('radio change listener');\r\n      radioInstances[0].change.subscribe(changeSpy);\r\n\r\n      radioInstances[0].checked = true;\r\n      fixture.detectChanges();\r\n      tick();\r\n      expect(changeSpy).toHaveBeenCalled();\r\n\r\n      radioInstances[0].checked = false;\r\n      fixture.detectChanges();\r\n      tick();\r\n      expect(changeSpy).toHaveBeenCalledTimes(2);\r\n    }));\r\n\r\n    it('should emit a change event from the radio group', fakeAsync(() => {\r\n      expect(groupInstance.value).toBeFalsy();\r\n\r\n      let changeSpy = jasmine.createSpy('radio-group change listener');\r\n      groupInstance.change.subscribe(changeSpy);\r\n\r\n      groupInstance.value = 'fire';\r\n      fixture.detectChanges();\r\n      tick();\r\n      expect(changeSpy).toHaveBeenCalled();\r\n\r\n      groupInstance.value = 'water';\r\n      fixture.detectChanges();\r\n      tick();\r\n      expect(changeSpy).toHaveBeenCalledTimes(2);\r\n    }));\r\n\r\n    // TODO(jelbourn): test this in an e2e test with *real* focus, rather than faking\r\n    // a focus / blur event.\r\n    it('should focus individual radio buttons', () => {\r\n      let nativeRadioInput = <HTMLElement> radioNativeElements[0].querySelector('input');\r\n\r\n      expect(nativeRadioInput.classList).not.toContain('md-radio-focused');\r\n\r\n      dispatchFocusChangeEvent('focus', nativeRadioInput);\r\n      fixture.detectChanges();\r\n\r\n      expect(radioNativeElements[0].classList).toContain('md-radio-focused');\r\n\r\n      dispatchFocusChangeEvent('blur', nativeRadioInput);\r\n      fixture.detectChanges();\r\n\r\n      expect(radioNativeElements[0].classList).not.toContain('md-radio-focused');\r\n    });\r\n\r\n    it('should update the group and radios when updating the group value', () => {\r\n      expect(groupInstance.value).toBeFalsy();\r\n\r\n      testComponent.groupValue = 'fire';\r\n      fixture.detectChanges();\r\n\r\n      expect(groupInstance.value).toBe('fire');\r\n      expect(groupInstance.selected).toBe(radioInstances[0]);\r\n      expect(radioInstances[0].checked).toBe(true);\r\n      expect(radioInstances[1].checked).toBe(false);\r\n\r\n      testComponent.groupValue = 'water';\r\n      fixture.detectChanges();\r\n\r\n      expect(groupInstance.value).toBe('water');\r\n      expect(groupInstance.selected).toBe(radioInstances[1]);\r\n      expect(radioInstances[0].checked).toBe(false);\r\n      expect(radioInstances[1].checked).toBe(true);\r\n    });\r\n\r\n    it('should deselect all of the checkboxes when the group value is cleared', () => {\r\n      radioInstances[0].checked = true;\r\n\r\n      expect(groupInstance.value).toBeTruthy();\r\n\r\n      groupInstance.value = null;\r\n\r\n      expect(radioInstances.every(radio => !radio.checked)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('group with ngModel', () => {\r\n    let fixture: ComponentFixture<RadioGroupWithNgModel>;\r\n    let groupDebugElement: DebugElement;\r\n    let groupNativeElement: HTMLElement;\r\n    let radioDebugElements: DebugElement[];\r\n    let radioNativeElements: HTMLElement[];\r\n    let groupInstance: MdRadioGroup;\r\n    let radioInstances: MdRadioButton[];\r\n    let testComponent: RadioGroupWithNgModel;\r\n    let groupNgControl: NgControl;\r\n\r\n    beforeEach(async(() => {\r\n      builder.createAsync(RadioGroupWithNgModel).then(f => {\r\n        fixture = f;\r\n        fixture.detectChanges();\r\n\r\n        testComponent = fixture.debugElement.componentInstance;\r\n\r\n        groupDebugElement = fixture.debugElement.query(By.directive(MdRadioGroup));\r\n        groupNativeElement = groupDebugElement.nativeElement;\r\n        groupInstance = groupDebugElement.injector.get(MdRadioGroup);\r\n        groupNgControl = groupDebugElement.injector.get(NgControl);\r\n\r\n        radioDebugElements = fixture.debugElement.queryAll(By.directive(MdRadioButton));\r\n        radioNativeElements = radioDebugElements.map(debugEl => debugEl.nativeElement);\r\n        radioInstances = radioDebugElements.map(debugEl => debugEl.componentInstance);\r\n      });\r\n    }));\r\n\r\n    it('should set individual radio names based on the group name', () => {\r\n      expect(groupInstance.name).toBeTruthy();\r\n      for (let radio of radioInstances) {\r\n        expect(radio.name).toBe(groupInstance.name);\r\n      }\r\n\r\n      groupInstance.name = 'new name';\r\n      for (let radio of radioInstances) {\r\n        expect(radio.name).toBe(groupInstance.name);\r\n      }\r\n    });\r\n\r\n    it('should check the corresponding radio button on group value change', () => {\r\n      expect(groupInstance.value).toBeFalsy();\r\n      for (let radio of radioInstances) {\r\n        expect(radio.checked).toBeFalsy();\r\n      }\r\n\r\n      groupInstance.value = 'vanilla';\r\n      for (let radio of radioInstances) {\r\n        expect(radio.checked).toBe(groupInstance.value === radio.value);\r\n      }\r\n      expect(groupInstance.selected.value).toBe(groupInstance.value);\r\n    });\r\n\r\n    it('should have the correct ngControl state initially and after interaction', fakeAsync(() => {\r\n      // The control should start off valid, pristine, and untouched.\r\n      expect(groupNgControl.valid).toBe(true);\r\n      expect(groupNgControl.pristine).toBe(true);\r\n      expect(groupNgControl.touched).toBe(false);\r\n\r\n      // After changing the value programmatically, the control should become dirty (not pristine),\r\n      // but remain untouched.\r\n      radioInstances[1].checked = true;\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(groupNgControl.valid).toBe(true);\r\n      expect(groupNgControl.pristine).toBe(false);\r\n      expect(groupNgControl.touched).toBe(false);\r\n\r\n      // After a user interaction occurs (such as a click), the control should remain dirty and\r\n      // now also be touched.\r\n      radioNativeElements[2].click();\r\n      fixture.detectChanges();\r\n      tick();\r\n\r\n      expect(groupNgControl.valid).toBe(true);\r\n      expect(groupNgControl.pristine).toBe(false);\r\n      expect(groupNgControl.touched).toBe(true);\r\n    }));\r\n\r\n    it('should update the ngModel value when selecting a radio button', fakeAsync(() => {\r\n      radioInstances[1].checked = true;\r\n      fixture.detectChanges();\r\n\r\n      tick();\r\n\r\n      expect(testComponent.modelValue).toBe('chocolate');\r\n    }));\r\n  });\r\n\r\n  describe('group with ngModel and change event', () => {\r\n    let fixture: ComponentFixture<RadioGroupWithNgModel>;\r\n    let groupDebugElement: DebugElement;\r\n    let groupNativeElement: HTMLElement;\r\n    let radioDebugElements: DebugElement[];\r\n    let radioNativeElements: HTMLElement[];\r\n    let groupInstance: MdRadioGroup;\r\n    let radioInstances: MdRadioButton[];\r\n    let testComponent: RadioGroupWithNgModel;\r\n    let groupNgControl: NgControl;\r\n\r\n    beforeEach(async(() => {\r\n      builder.createAsync(RadioGroupWithNgModel).then(f => {\r\n        fixture = f;\r\n\r\n        testComponent = fixture.componentInstance;\r\n\r\n        groupDebugElement = fixture.debugElement.query(By.directive(MdRadioGroup));\r\n        groupNativeElement = groupDebugElement.nativeElement;\r\n        groupInstance = groupDebugElement.injector.get(MdRadioGroup);\r\n        groupNgControl = groupDebugElement.injector.get(NgControl);\r\n\r\n        radioDebugElements = fixture.debugElement.queryAll(By.directive(MdRadioButton));\r\n        radioNativeElements = radioDebugElements.map(debugEl => debugEl.nativeElement);\r\n        radioInstances = radioDebugElements.map(debugEl => debugEl.componentInstance);\r\n\r\n        fixture.detectChanges();\r\n      });\r\n    }));\r\n\r\n    it('should update the model before firing change event', fakeAsync(() => {\r\n      expect(testComponent.modelValue).toBeUndefined();\r\n      expect(testComponent.lastEvent).toBeUndefined();\r\n\r\n      groupInstance.value = 'chocolate';\r\n      fixture.detectChanges();\r\n\r\n      tick();\r\n      expect(testComponent.modelValue).toBe('chocolate');\r\n      expect(testComponent.lastEvent.value).toBe('chocolate');\r\n    }));\r\n  });\r\n\r\n  describe('as standalone', () => {\r\n    let fixture: ComponentFixture<StandaloneRadioButtons>;\r\n    let radioDebugElements: DebugElement[];\r\n    let seasonRadioInstances: MdRadioButton[];\r\n    let weatherRadioInstances: MdRadioButton[];\r\n    let testComponent: StandaloneRadioButtons;\r\n\r\n    beforeEach(async(() => {\r\n      builder.createAsync(StandaloneRadioButtons).then(f => {\r\n        fixture = f;\r\n        fixture.detectChanges();\r\n\r\n        testComponent = fixture.debugElement.componentInstance;\r\n\r\n        radioDebugElements = fixture.debugElement.queryAll(By.directive(MdRadioButton));\r\n        seasonRadioInstances = radioDebugElements\r\n            .filter(debugEl => debugEl.componentInstance.name == 'season')\r\n            .map(debugEl => debugEl.componentInstance);\r\n        weatherRadioInstances = radioDebugElements\r\n            .filter(debugEl => debugEl.componentInstance.name == 'weather')\r\n            .map(debugEl => debugEl.componentInstance);\r\n      });\r\n    }));\r\n\r\n    it('should uniquely select radios by a name', () => {\r\n      seasonRadioInstances[0].checked = true;\r\n      weatherRadioInstances[1].checked = true;\r\n\r\n      fixture.detectChanges();\r\n      expect(seasonRadioInstances[0].checked).toBe(true);\r\n      expect(seasonRadioInstances[1].checked).toBe(false);\r\n      expect(seasonRadioInstances[2].checked).toBe(false);\r\n      expect(weatherRadioInstances[0].checked).toBe(false);\r\n      expect(weatherRadioInstances[1].checked).toBe(true);\r\n      expect(weatherRadioInstances[2].checked).toBe(false);\r\n\r\n      seasonRadioInstances[1].checked = true;\r\n      fixture.detectChanges();\r\n      expect(seasonRadioInstances[0].checked).toBe(false);\r\n      expect(seasonRadioInstances[1].checked).toBe(true);\r\n      expect(seasonRadioInstances[2].checked).toBe(false);\r\n      expect(weatherRadioInstances[0].checked).toBe(false);\r\n      expect(weatherRadioInstances[1].checked).toBe(true);\r\n      expect(weatherRadioInstances[2].checked).toBe(false);\r\n\r\n      weatherRadioInstances[2].checked = true;\r\n      expect(seasonRadioInstances[0].checked).toBe(false);\r\n      expect(seasonRadioInstances[1].checked).toBe(true);\r\n      expect(seasonRadioInstances[2].checked).toBe(false);\r\n      expect(weatherRadioInstances[0].checked).toBe(false);\r\n      expect(weatherRadioInstances[1].checked).toBe(false);\r\n      expect(weatherRadioInstances[2].checked).toBe(true);\r\n    });\r\n  });\r\n});\r\n\r\n\r\n@Component({\r\n  directives: [MD_RADIO_DIRECTIVES],\r\n  template: `\r\n  <md-radio-group [disabled]=\"isGroupDisabled\" [value]=\"groupValue\" name=\"test-name\">\r\n    <md-radio-button value=\"fire\">Charmander</md-radio-button>\r\n    <md-radio-button value=\"water\">Squirtle</md-radio-button>\r\n    <md-radio-button value=\"leaf\">Bulbasaur</md-radio-button>\r\n  </md-radio-group>\r\n  `\r\n})\r\nclass RadiosInsideRadioGroup {\r\n  isGroupDisabled: boolean = false;\r\n  groupValue: string = null;\r\n}\r\n\r\n\r\n@Component({\r\n  directives: [MD_RADIO_DIRECTIVES],\r\n  template: `\r\n    <md-radio-button name=\"season\" value=\"spring\">Spring</md-radio-button>\r\n    <md-radio-button name=\"season\" value=\"summer\">Summer</md-radio-button>\r\n    <md-radio-button name=\"season\" value=\"autum\">Autumn</md-radio-button>\r\n    \r\n    <md-radio-button name=\"weather\" value=\"warm\">Spring</md-radio-button>\r\n    <md-radio-button name=\"weather\" value=\"hot\">Summer</md-radio-button>\r\n    <md-radio-button name=\"weather\" value=\"cool\">Autumn</md-radio-button>\r\n  `\r\n})\r\nclass StandaloneRadioButtons { }\r\n\r\n\r\n@Component({\r\n  directives: [MD_RADIO_DIRECTIVES, FORM_DIRECTIVES],\r\n  template: `\r\n  <md-radio-group [(ngModel)]=\"modelValue\" (change)=\"lastEvent = $event\">\r\n    <md-radio-button *ngFor=\"let option of options\" [value]=\"option.value\">\r\n      {{option.label}}\r\n    </md-radio-button>\r\n  </md-radio-group>\r\n  `\r\n})\r\nclass RadioGroupWithNgModel {\r\n  modelValue: string;\r\n  options = [\r\n    {label: 'Vanilla', value: 'vanilla'},\r\n    {label: 'Chocolate', value: 'chocolate'},\r\n    {label: 'Strawberry', value: 'strawberry'},\r\n  ];\r\n  lastEvent: MdRadioChange;\r\n}\r\n\r\n// TODO(jelbourn): remove eveything below when Angular supports faking events.\r\n\r\n/**\r\n * Dispatches a focus change event from an element.\r\n * @param eventName Name of the event, either 'focus' or 'blur'.\r\n * @param element The element from which the event will be dispatched.\r\n */\r\nfunction dispatchFocusChangeEvent(eventName: string, element: HTMLElement): void {\r\n  let event  = document.createEvent('Event');\r\n  event.initEvent(eventName, true, true);\r\n  element.dispatchEvent(event);\r\n}\r\n"]}